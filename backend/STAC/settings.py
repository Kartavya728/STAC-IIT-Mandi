# STAC/settings.py

"""
Django settings for STAC project.
Generated by 'django-admin startproject' using Django 5.1.
For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
from pathlib import Path
import environ
import os  # <<< IMPORT OS MODULE

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Corrected BASE_DIR definition
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environment variables
env = environ.Env()

# Reading the .env file
# Assuming .env is in BASE_DIR (one level up from this settings.py file)
env_file_path = os.path.join(BASE_DIR, '.env')
if os.path.exists(env_file_path):
    environ.Env.read_env(env_file_path)
else:
    print(f"Warning: .env file not found at {env_file_path}. Using default or os environment variables.")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='your-default-secret-key-for-dev-if-env-fails-but-please-set-a-real-one')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=True) # Good practice to also source this from .env

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=[]) # For development, [] is fine. For prod, set via .env

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'corsheaders',
    'rest_framework', # Ensure DRF is listed

    # your apps
    'CoreTeam',
    'Events',
    'tailwind',
    'tailcss', # Assuming this is your Tailwind app
    'Gallery',
    'AboutUs',
    'IAU',
    'ckeditor',
    'Alumni',
    'HomePage',

    'django_browser_reload',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware', # <<< Must be before AuthMiddleware
    'corsheaders.middleware.CorsMiddleware',                # <<< Correct position
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware', # <<< Required for admin
    'django.contrib.messages.middleware.MessageMiddleware',    # <<< Required for admin
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_browser_reload.middleware.BrowserReloadMiddleware',
]

# --- CORS CONFIGURATION ---
CORS_ALLOWED_ORIGINS = env.list('CORS_ALLOWED_ORIGINS', default=[
    "http://localhost:3000",  # Your Next.js frontend development server
    "http://127.0.0.1:3000", # Also common for Next.js dev
])
# To allow all origins (less secure, for quick testing only, NOT for production)
# CORS_ALLOW_ALL_ORIGINS = env.bool('CORS_ALLOW_ALL_ORIGINS', default=False) # Set to True in .env for dev if needed
CORS_ALLOW_CREDENTIALS = env.bool('CORS_ALLOW_CREDENTIALS', default=True) # If you need to send cookies/auth headers

# Optional: If you need to allow specific headers or methods
# CORS_ALLOW_HEADERS = list(corsheaders.defaults.default_headers) + [
#     "my-custom-header",
# ]
# CORS_ALLOW_METHODS = list(corsheaders.defaults.default_methods) + [
#     "PURGE",
# ]
# --- END CORS CONFIGURATION ---

TAILWIND_APP_NAME = 'tailcss' # Ensure this matches your Tailwind app name
INTERNAL_IPS = ['127.0.0.1'] # django-debug-toolbar and django-browser-reload use this

ROOT_URLCONF = 'STAC.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates', # <<< Required for admin
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,  # <<< Important: Allows Django to find admin templates
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'STAC.wsgi.application'

NPM_BIN_PATH = env('NPM_BIN_PATH', default="C:/Program Files/nodejs/npm.cmd") # Source from .env or provide a sensible default

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# If you use a different database, you can configure it using dj-database-url and .env
# Example for PostgreSQL:
# DATABASES = {
#     'default': env.db('DATABASE_URL', default=f'sqlite:///{BASE_DIR / "db.sqlite3"}')
# }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC' # Consider changing to your local timezone, e.g., 'Asia/Kolkata'
USE_I18N = True
USE_TZ = True # Recommended to keep True for timezone-aware datetimes

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = 'static/' # Django 5.0+ prefers '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'), # For project-wide static files
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_collected') # For collectstatic in production

# Media files (User-uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        # Add BrowsableAPIRenderer if you want it during development
        # 'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    # You can add default permission classes, authentication classes, etc. here
    # 'DEFAULT_AUTHENTICATION_CLASSES': [
    #     'rest_framework.authentication.SessionAuthentication',
    # ],
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    # ]
}